#!/bin/bash
# Copyright (c) 2021 Alexander Chernov <cher@ejudge.ru>

# assume that we have single argument
# EJUDGE_JAVA_FLAGS may be used to pass additional flags
# EJUDGE_JAVA_POLICY is the policy name
# EJUDGE_PREFIX_DIR is used to create the full path
# EJUDGE_JAVA_COMPILER is the compiler version (javac or javac7)

runfile="$1"
shift

if [ "${EJUDGE_JAVA_COMPILER}" = "javac7" ]
then
#
#include javac7.cfg
#
    EJUDGE_JAVA_FLAGS="-client ${EJUDGE_JAVA_FLAGS}"
else
#
#include javac.cfg
#
fi

if [ x"${JAVARUN}" = x ]
then
  JAVARUN="/usr/bin/java"
  JAVADIR="/usr"
  JAVAVER="1.6"
fi

# avoid setting JAVA_HOME if it is already set
#if [ "${JAVA_HOME}" = "" ]
#then
#    JAVA_HOME="${JAVADIR}"
#    PATH="${JAVA_HOME}/bin:${PATH}"
#    export JAVA_HOME PATH
#fi
#
#if [ x"${EJUDGE_JAVA_POLICY}" = xnone ]
#then
#  # no security policy, use with caution!
#  exec "${JAVARUN}" ${EJUDGE_JAVA_FLAGS} -jar "${runfile}"
#fi
#
#[ x"${EJUDGE_JAVA_POLICY}" = x ] && EJUDGE_JAVA_POLICY=default.policy
#
#if [ -f "${EJUDGE_JAVA_POLICY}" ]
#then
#  policy_file="${EJUDGE_JAVA_POLICY}"
#else
#  if [ x"${EJUDGE_PREFIX_DIR}" = x ]
#  then
#    echo "EJUDGE_PREFIX_DIR is not set - impossible to set security policy" >&2
#    exit 128
#  fi
#  policy_file="${EJUDGE_PREFIX_DIR}/share/ejudge/${EJUDGE_JAVA_POLICY}"
#fi
#
#if [ ! -f "${policy_file}" ]
#then
#  echo "Java policy file does not exist" >&2
#  exit 128
#fi

# Check if this JAR is generated by scala
if unzip -c -q "${runfile}" META-INF/MANIFEST.MF | grep Scala > /dev/null
then
    # that's scala
    # FIXME: consider special options for scala
    F=${EJUDGE_JAVA_FLAGS//-X/-J-X}
    exec scala ${F} "${runfile}" "$@"
fi

#exec "${JAVARUN}" ${EJUDGE_JAVA_FLAGS} -Djava.security.manager -Djava.security.policy="${policy_file}" -jar "${runfile}" "$@"
exec "${JAVARUN}" ${EJUDGE_JAVA_FLAGS} -jar "${runfile}" "$@"
