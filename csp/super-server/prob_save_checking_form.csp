<% //-*- c -*-
%><%@include "includes.csp"
%><%

#define COPYSTR(f) snprintf(prob->f, sizeof(prob->f), "%s", (f))
#define MOVEENV(f) sarray_free(prob->f); prob->f = f; f = NULL
#define MOVESTR(f) xfree(prob->f); prob->f = f; f = NULL

%><%@set getter_name = "csp_get_prob_save_checking_form"
%><%@set ac_prefix = "SSERV_CMD_"
%><%@set err_prefix = "SSERV_ERR_"
%><%@page csp_view_prob_save_checking_form(PageInterface *pg, FILE *log_f, FILE *out_f, struct http_request_info *phr)
%><%@include "stdvars.csp"
%><%
    snprintf(phr->content_type, sizeof(phr->content_type), "application/json; charset=%s", EJUDGE_CHARSET);

    int prob_id = 0;

    const unsigned char *standard_checker = NULL;
    unsigned char *check_cmd = NULL;
    ejintbool_t check_cmd_dflt = 0;
    int checker_real_time_limit = -1;
    ejintbool_t checker_real_time_limit_dflt = 0;
    int checker_time_limit_ms = -1;
    ejintbool_t checker_time_limit_ms_dflt = 0;
    ej_size64_t checker_max_vm_size = -1LL;
    ejintbool_t checker_max_vm_size_dflt = 0;
    ej_size64_t checker_max_stack_size = -1LL;
    ejintbool_t checker_max_stack_size_dflt = 0;
    ej_size64_t checker_max_rss_size = -1LL;
    ejintbool_t checker_max_rss_size_dflt = 0;
    char **checker_env = NULL;
    int scoring_checker = -1;
    int enable_checker_token = -1;
    int enable_testlib_mode = -1;
    int enable_extended_info = -1;
    int stop_on_first_fail = -1;
    unsigned char *valuer_cmd = NULL;
    ejintbool_t valuer_cmd_dflt = 0;
    unsigned char *standard_valuer = NULL;
    ejintbool_t standard_valuer_dflt = 0;
    int valuer_sets_marked = -1;
    int interactive_valuer = -1;
    char **valuer_env = NULL;
    unsigned char *interactor_cmd = NULL;
    ejintbool_t interactor_cmd_dflt = 0;
    char **interactor_env = NULL;
    int interactor_time_limit = -1;
    ejintbool_t interactor_time_limit_dflt = 0;
    int interactor_real_time_limit = -1;
    ejintbool_t interactor_real_time_limit_dflt = 0;
    unsigned char *init_cmd = NULL;
    ejintbool_t init_cmd_dflt = 0;
    char **init_env = NULL;

    int i;
    struct section_problem_data *prob = NULL;

    char *msg_s = NULL;
    size_t msg_z = 0;
    FILE *msg_f = open_memstream(&msg_s, &msg_z);

%><s:read var="prob_id" required="yes" /><%
%><s:read var="standard_checker" /><%
%><s:read var="check_cmd" normalize="yes" nonnull="yes" /><%
%><s:read var="check_cmd_dflt" default="0" /><%
%><s:read var="checker_real_time_limit" default="-1" /><%
%><s:read var="checker_real_time_limit_dflt" default="0" /><%
%><s:read var="checker_time_limit_ms" default="-1" /><%
%><s:read var="checker_time_limit_ms_dflt" default="0" /><%
%><s:read var="checker_max_vm_size" default="-1LL" /><%
%><s:read var="checker_max_vm_size_dflt" default="0" /><%
%><s:read var="checker_max_stack_size" default="-1LL" /><%
%><s:read var="checker_max_stack_size_dflt" default="0" /><%
%><s:read var="checker_max_rss_size" default="-1LL" /><%
%><s:read var="checker_max_rss_size_dflt" default="0" /><%
%><s:read var="checker_env" /><%
%><s:read var="scoring_checker" default="-1" /><%
%><s:read var="enable_checker_token" default="-1" /><%
%><s:read var="enable_testlib_mode" default="-1" /><%
%><s:read var="enable_extended_info" default="-1" /><%
%><s:read var="stop_on_first_fail" default="-1" /><%
%><s:read var="valuer_cmd" normalize="yes" nonnull="yes" /><%
%><s:read var="valuer_cmd_dflt" default="0" /><%
%><s:read var="standard_valuer" normalize="yes" nonnull="yes" /><%
%><s:read var="standard_valuer_dflt" default="0" /><%
%><s:read var="valuer_sets_marked" default="-1" /><%
%><s:read var="interactive_valuer" default="-1" /><%
%><s:read var="valuer_env" /><%
%><s:read var="interactor_cmd" normalize="yes" nonnull="yes" /><%
%><s:read var="interactor_cmd_dflt" default="0" /><%
%><s:read var="interactor_env" /><%
%><s:read var="interactor_time_limit" default="-1" /><%
%><s:read var="interactor_time_limit_dflt" default="0" /><%
%><s:read var="interactor_real_time_limit" default="-1" /><%
%><s:read var="interactor_real_time_limit_dflt" default="0" /><%
%><s:read var="init_cmd" normalize="yes" nonnull="yes" /><%
%><s:read var="init_cmd_dflt" default="0" /><%
%><s:read var="init_env" /><%

    if (retval || !phr->ss) goto cleanup;

    if (!standard_checker) standard_checker = "";
    if (*standard_checker) {
        const struct std_checker_info *std_checkers = super_html_std_checkers;
        for (i = 1; std_checkers[i].name; ++i) {
            if (!strcmp(std_checkers[i].name, standard_checker))
                break;
        }
        if (!std_checkers[i].name) standard_checker = "";
    }
    if (check_cmd_dflt) {
        xfree(check_cmd);
        check_cmd = NULL;
    }
    if (checker_real_time_limit < 0) checker_real_time_limit = -1;
    if (checker_real_time_limit_dflt) checker_real_time_limit = -1;
    if (checker_time_limit_ms < 0) checker_time_limit_ms = -1;
    if (checker_time_limit_ms_dflt) checker_time_limit_ms = -1;
    if (checker_max_vm_size < 0) checker_max_vm_size = -1LL;
    if (checker_max_vm_size_dflt) checker_max_vm_size = -1LL;
    if (checker_max_vm_size > 0 && checker_max_vm_size != (size_t) checker_max_vm_size) {
        fprintf(msg_f, "checker_max_vm_size is too large<br/>");
        FAIL(SSERV_ERR_INVALID_PARAMETER);
    }
    if (checker_max_stack_size < 0) checker_max_stack_size = -1LL;
    if (checker_max_stack_size_dflt) checker_max_stack_size = -1LL;
    if (checker_max_stack_size > 0 && checker_max_stack_size != (size_t) checker_max_stack_size) {
        fprintf(msg_f, "checker_max_stack_size is too large<br/>");
        FAIL(SSERV_ERR_INVALID_PARAMETER);
    }
    if (checker_max_rss_size < 0) checker_max_rss_size = -1LL;
    if (checker_max_rss_size_dflt) checker_max_rss_size = -1LL;
    if (checker_max_rss_size > 0 && checker_max_rss_size != (size_t) checker_max_rss_size) {
        fprintf(msg_f, "checker_max_rss_size is too large<br/>");
        FAIL(SSERV_ERR_INVALID_PARAMETER);
    }
    if (scoring_checker > 0) scoring_checker = 1;
    if (enable_checker_token > 0) enable_checker_token = 1;
    if (enable_testlib_mode > 0) enable_testlib_mode = 1;
    if (enable_extended_info > 0) enable_extended_info = 1;
    if (stop_on_first_fail > 0) stop_on_first_fail = 1;
    if (valuer_cmd_dflt) {
        xfree(valuer_cmd);
        valuer_cmd = NULL;
    }
    if (standard_valuer_dflt) {
        xfree(standard_valuer);
        standard_valuer = NULL;
    }
    if (valuer_sets_marked > 0) valuer_sets_marked = 1;
    if (interactive_valuer > 0) interactive_valuer = 1;
    if (interactor_cmd_dflt) {
        xfree(interactor_cmd);
        interactor_cmd = 0;
    }
    if (interactor_time_limit < 0) interactor_time_limit = -1;
    if (interactor_time_limit_dflt) interactor_time_limit = -1;
    if (interactor_real_time_limit < 0) interactor_real_time_limit = -1;
    if (interactor_real_time_limit_dflt) interactor_real_time_limit = -1;
    if (init_cmd_dflt) {
        xfree(init_cmd); init_cmd = NULL;
    }

    if (prob_id <= 0) {
        // abstract problem
        i = -prob_id;
        if (i >= phr->ss->aprob_u) FAIL(SSERV_ERR_INVALID_PARAMETER);
        prob = phr->ss->aprobs[i];
        if (!prob) FAIL(SSERV_ERR_INVALID_PARAMETER);
        if (scoring_checker < 0) scoring_checker = 0;
        if (enable_checker_token < 0) enable_checker_token = 0;
        if (enable_testlib_mode < 0) enable_testlib_mode = 0;
        if (enable_extended_info < 0) enable_extended_info = 0;
        if (stop_on_first_fail < 0) stop_on_first_fail = 0;
        if (valuer_sets_marked < 0) valuer_sets_marked = 0;
        if (interactive_valuer < 0) interactive_valuer = 0;
        if (standard_checker && !standard_checker[0]) {
            standard_checker = NULL;
        }
        if (valuer_cmd && !valuer_cmd[0]) {
            xfree(valuer_cmd); valuer_cmd = NULL;
        }
        if (standard_valuer && !standard_valuer[0]) {
            xfree(standard_valuer); standard_valuer = NULL;
        }
    } else {
        i = prob_id;
        if (i >= phr->ss->prob_a) FAIL(SSERV_ERR_INVALID_PARAMETER);
        prob = phr->ss->probs[i];
        if (!prob) FAIL(SSERV_ERR_INVALID_PARAMETER);
        if (scoring_checker < 0) scoring_checker = -1;
        if (enable_checker_token < 0) enable_checker_token = -1;
        if (enable_testlib_mode < 0) enable_testlib_mode = -1;
        if (enable_extended_info < 0) enable_extended_info = -1;
        if (stop_on_first_fail < 0) stop_on_first_fail = -1;
        if (valuer_sets_marked < 0) valuer_sets_marked = -1;
        if (interactive_valuer < 0) interactive_valuer = -1;
    }

    if (!retval && phr->ss) {
        xstrdup3(&prob->standard_checker, standard_checker);
        MOVESTR(check_cmd);
        prob->checker_real_time_limit = checker_real_time_limit;
        prob->checker_time_limit_ms = checker_time_limit_ms;
        if (checker_max_vm_size >= 0) {
            prob->checker_max_vm_size = (size_t) checker_max_vm_size;
        } else {
            prob->checker_max_vm_size = -1LL;
        }
        if (checker_max_stack_size >= 0) {
            prob->checker_max_stack_size = (size_t) checker_max_stack_size;
        } else {
            prob->checker_max_stack_size = -1LL;
        }
        if (checker_max_rss_size >= 0) {
            prob->checker_max_rss_size = (size_t) checker_max_rss_size;
        } else {
            prob->checker_max_rss_size = -1LL;
        }
        MOVEENV(checker_env);
        prob->scoring_checker = scoring_checker;
        prob->enable_checker_token = enable_checker_token;
        prob->enable_testlib_mode = enable_testlib_mode;
        prob->enable_extended_info = enable_extended_info;
        prob->stop_on_first_fail = stop_on_first_fail;
        MOVESTR(valuer_cmd);
        MOVESTR(standard_valuer);
        prob->valuer_sets_marked = valuer_sets_marked;
        prob->interactive_valuer = interactive_valuer;
        MOVEENV(valuer_env);
        MOVESTR(interactor_cmd);
        MOVEENV(interactor_env);
        prob->interactor_time_limit = interactor_time_limit;
        prob->interactor_real_time_limit = interactor_real_time_limit;
        MOVESTR(init_cmd);
        MOVEENV(init_env);
    }

cleanup:;
    fclose(msg_f); msg_f = NULL;
%>
{
    "input" : {
    },
    "retval" : <s:v value="retval" />,
    "messages" : "<s:v value="msg_s" json="yes" checkExpr="" />"
}
<%
    html_armor_free(&ab);
    xfree(msg_s);
    xfree(check_cmd);
    sarray_free(checker_env);
    xfree(valuer_cmd);
    xfree(standard_valuer);
    sarray_free(valuer_env);
    xfree(interactor_cmd);
    sarray_free(interactor_env);
    xfree(init_cmd);
    sarray_free(init_env);
%>
