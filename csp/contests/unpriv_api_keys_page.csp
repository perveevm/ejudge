<% // -*- mode: html -*-
%><%@include "unpriv_includes.csp"
%><%
#include "ejudge/userlist_clnt.h"
#include "ejudge/userlist_proto.h"
#include "ejudge/base64.h"
%><%@set ac_prefix = "NEW_SRV_ACTION_"
%><%@set getter_name = "csp_get_unpriv_api_keys_page"
%><%@page csp_view_unpriv_api_keys_page(PageInterface *ps, FILE *log_f, FILE *out_f, struct http_request_info *phr)
%><%@include "unpriv_stdvars.csp"
%><%
  unsigned char title[1024];
  int summoned_count = 0;
  struct userlist_api_key api_key_params = {};
  int api_key_out_count = 0;
  struct userlist_api_key *api_key_outs = NULL;
  struct userlist_api_key *cur_api_key = NULL;
  int i;
  char token_buf[64];
  int token_len;
  __attribute__((unused)) int accepting_mode = 0;

  if (ns_open_ul_connection(phr->fw_state) < 0) {
    FAIL(NEW_SRV_ERR_USERLIST_SERVER_DOWN);
  }

  if (global->is_virtual) {
    start_time = run_get_virtual_start_time(cs->runlog_state, phr->user_id);
    stop_time = run_get_virtual_stop_time(cs->runlog_state, phr->user_id,
                                            cs->current_time);
    if (stop_time <= 0 || cs->upsolving_mode) accepting_mode = 1;

    struct run_header hdr;
    run_get_header(cs->runlog_state, &hdr);
    contest_start_time = hdr.start_time;
    contest_stop_time = hdr.stop_time;
  } else {
    start_time = run_get_start_time(cs->runlog_state);
    stop_time = run_get_stop_time(cs->runlog_state, phr->user_id, cs->current_time);
    accepting_mode = cs->accepting_mode;
  }

  api_key_params.user_id = phr->user_id;
  int r = userlist_clnt_api_key_request(ul_conn, ULS_GET_API_KEYS_FOR_USER, 1, &api_key_params, &api_key_out_count, &api_key_outs, NULL);
  if (r < 0) {
    FAIL(NEW_SRV_ERR_DATABASE_FAILED);
  }

  l10n_setlocale(phr->locale_id);
  snprintf(title, sizeof(title), _("API keys"));
%><%@include "unpriv_header.csp"
%><%@include "unpriv_menu.csp"
%><%@include "unpriv_status.csp"
%>
<div class="l14">
<h2><s:v value="title" escape="false" /></h2>

<h3><s:_>List of API keys</s:_></h3>

<table class="b1">
  <tr><th class="b1">Token</th><th class="b1">Create Time</th><th class="b1">Expiry Time</th><th class="b1">Actions</th></tr>
<% for (i = 0; i < api_key_out_count; ++i) {
     cur_api_key = &api_key_outs[i];
     token_len = base64u_encode(cur_api_key->token, 32, token_buf);
     token_buf[token_len] = 0;
%><s:url name="DeleteUrl" ac="delete-api-key"><s:param name="token" value="token_buf" /></s:url>
    <tr>
      <td class="b1"><s:v value="token_buf" /></td>
      <td class="b1"><s:v value="cur_api_key->create_time" /></td>
      <td class="b1"><% if (cur_api_key->expiry_time > 0) { %><s:v value="cur_api_key->expiry_time" /><% } else { %>N/A<% } %></td>
      <td class="b1">[<s:a url="DeleteUrl">Delete</s:a>]</td>
    </tr>
<% } %>
</table>

<h3><s:_>Create new API key</s:_></h3>

<s:form>
Duration: <s:select name="key_duration">
  <option value="0">Indefinite</option>
  <option value="3600">1h</option>
  <option value="86400">1d</option>
  <option value="604800">1w</option>
  <option value="2592000">30d</option>
  <option value="31536000">1y</option>
</s:select>
<s:submit ac="create-api-key" />
</s:form>

</div>
<%@include "unpriv_footer.csp"
%><%
  l10n_resetlocale();
cleanup:;
  for (int i = 0; i < api_key_out_count; ++i) {
    userlist_api_key_free(&api_key_outs[i]);
  }
  xfree(api_key_outs);
  html_armor_free(&ab);
%>
