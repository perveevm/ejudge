<%
%><%@include "priv_includes.csp"
%><%
#include "ejudge/super_run_packet.h"
#include "ejudge/super_run_status.h"
#include "ejudge/compile_heartbeat.h"

#include "flatbuf-gen/compile_heartbeat_reader.h"
%><%@set getter_name = "csp_get_priv_testing_queue_page"
%><%@set ac_prefix = "NEW_SRV_ACTION_"
%><%@page csp_view_priv_testing_queue_page(PageInterface *pg, FILE *log_f, FILE *out_f, struct http_request_info *phr)
%><%@include "priv_stdvars.csp"
%><%
  const unsigned char *title = NULL;
  struct TestingQueueArray vec;
  struct super_run_status_vector srsv;
  struct compile_heartbeat_vector chv;
  struct compile_queues_info cqi;
  int i, prob_id, user_id;
  const unsigned char *lang_short_name;
  int enable_main_menu = 0;
  struct timeval td;
  long long current_time_ms;
  long long current_time_us;
  char durbuf[64];
  time_t judge_request_time;
  long long tv2;
  long long tv1;

  memset(&vec, 0, sizeof(vec));
  memset(&srsv, 0, sizeof(srsv));
  memset(&chv, 0, sizeof(chv));
  memset(&cqi, 0, sizeof(cqi));

  if (phr->role != USER_ROLE_ADMIN) FAIL(NEW_SRV_ERR_PERMISSION_DENIED);

  info("audit:%s:%d:%d", phr->action_str, phr->user_id, phr->contest_id);

  gettimeofday(&td, NULL);
  current_time_ms = ((long long) td.tv_sec) * 1000 + td.tv_usec / 1000;
  current_time_us = td.tv_sec * 1000000LL + td.tv_usec;

  ns_scan_run_queue(cs, &vec);
  ns_scan_heartbeat_dirs(cs, &srsv);
  ns_scan_compile_heartbeat_dirs(cs, &chv);
  ns_scan_compile_queue(cs, &cqi);

  long long earlier_judge_request_us = 0;
  long long earlier_run_queue_us = 0;
  for (i = 0; i < vec.u; ++i) {
    const struct super_run_in_global_packet *srgp = vec.v[i].packet->global;
    if (srgp->ts1 > 0) {
      long long us = srgp->ts1 * 1000000LL + srgp->ts1_us;
      if (earlier_judge_request_us <= 0 || us < earlier_judge_request_us) {
        earlier_judge_request_us = us;
      }
    }
    if (srgp->ts4 > 0) {
      long long us = srgp->ts4 * 1000000LL + srgp->ts4_us;
      if (earlier_run_queue_us <= 0 || us < earlier_run_queue_us) {
        earlier_run_queue_us = us;
      }
    }
  }
  long long longest_judge_request_us = 0;
  if (earlier_judge_request_us > 0) {
    longest_judge_request_us = current_time_us - earlier_judge_request_us;
  }
  if (longest_judge_request_us < 0) longest_judge_request_us = 0;
  long long longest_run_queue_us = 0;
  if (earlier_run_queue_us > 0) {
    longest_run_queue_us = current_time_us - earlier_run_queue_us;
  }
  if (longest_run_queue_us < 0) longest_run_queue_us = 0;

  l10n_setlocale(phr->locale_id);
  title = _("Testing queue");
%><%@include "priv_header.csp"
%>
</div>

<table class="b0"><tr>
<td class="b0"><s:a ac="main-page"><s:_>Main page</s:_></s:a></td>
<td class="b0"><s:a ac="view-testing-queue"><s:_>Refresh</s:_></s:a></td>
</tr></table>

<%
  if (vec.u > 0) {
%>
<p><big>Queue length: <s:v value="vec.u" /></big></p>
<%
  }
  if (longest_judge_request_us > 0) {
    snprintf(durbuf, sizeof(durbuf), "%lld.%06lld",
             longest_judge_request_us / 1000000,
             longest_judge_request_us % 1000000);
%>
<p><big>Oldest judge request in queue: <s:v value="durbuf" /></big></p>
<%
  }
  if (longest_run_queue_us > 0) {
    snprintf(durbuf, sizeof(durbuf), "%lld.%06lld",
             longest_run_queue_us / 1000000,
             longest_run_queue_us % 1000000);
%>
<p><big>Oldest run request in queue: <s:v value="durbuf" /></big></p>
<%
  }
%>

<s:form>
<table class="b1">
    <tr>
        <th class="b1">NN</th>
        <th class="b1">ContestId</th>
        <th class="b1">Run Queue</th>
        <th class="b1"><s:_>Packet name</s:_></th>
        <th class="b1"><s:_>Priority</s:_></th>
        <th class="b1">RunId</th>
        <th class="b1"><s:_>User</s:_></th>
        <th class="b1"><s:_>Problem</s:_></th>
        <th class="b1"><s:_>Language</s:_></th>
        <th class="b1"><s:_>Judge Request Time</s:_></th>
        <th class="b1">Compile Dur</th>
        <th class="b1">Full Compile Dur</th>
        <th class="b1"><s:_>Actions</s:_></th>
    </tr>
<%  for (i = 0; i < vec.u; ++i) {
    const struct super_run_in_global_packet *srgp = vec.v[i].packet->global;
    const struct super_run_in_problem_packet *srpp = vec.v[i].packet->problem;

    lang_short_name = srgp->lang_short_name;
    if (!lang_short_name) lang_short_name = "";
    judge_request_time = srgp->ts1;
%>
    <tr>
        <td class="b1"><s:v value="i + 1" /></td>
        <td class="b1"><s:v value="srgp->contest_id" /></td>
        <td class="b1"><s:v escape="false" value="vec.v[i].queue_id" /></td>
        <td class="b1"><s:v escape="false" value="vec.v[i].entry_name" /></td>
        <td class="b1"><s:v value="vec.v[i].priority" /></td>
        <td class="b1"><s:v value="srgp->run_id" /></td>
<%    if (srgp->contest_id == cnts->id) { %>
<%      user_id = srgp->user_id; %>
        <td class="b1"><s:v value="teamdb_get_name_2(cs->teamdb_state, user_id)" /></td>
        <td class="b1"><%
      prob_id = srpp->id;
      if (prob_id > 0 && prob_id <= cs->max_prob && cs->probs[prob_id]) {
%><s:v value="cs->probs[prob_id]->short_name" escape="false" /><%
      } else {
%>Problem <s:v value="prob_id" /><%
      }
%></td>
<%    } else { %>
        <td class="b1"><%
      if (srgp->user_name && srgp->user_name[0]) {
%><s:v value="srgp->user_name" /><%
      } else if (srgp->user_login && srgp->user_login[0]) {
%><s:v value="srgp->user_login" /><%
      } else {
%>User <s:v value="srgp->user_id" /><%
      }
%></td>
        <td class="b1"><%
      if (srpp->short_name && srpp->short_name[0]) {
%><s:v value="srpp->short_name" /><%
      } else {
%>Problem <s:v value="srpp->id" /><%
      }
%></td>
<%    } %>
        <td class="b1"><s:v value="lang_short_name" /></td>
        <td class="b1"><s:v value="judge_request_time" /></td>
<%
      tv1 = srgp->ts2 * 1000000LL + srgp->ts2_us;
      tv2 = srgp->ts3 * 1000000LL + srgp->ts3_us;
      tv2 -= tv1;
      if (tv2 < 0) tv2 = 0;
      snprintf(durbuf, sizeof(durbuf), "%lld.%06lld",
               tv2 / 1000000, tv2 % 1000000);
%>
        <td class="b1"><s:v value="durbuf" /></td>
<%
      tv1 = srgp->ts1 * 1000000LL + srgp->ts1_us;
      tv2 = srgp->ts4 * 1000000LL + srgp->ts4_us;
      tv2 -= tv1;
      if (tv2 < 0) tv2 = 0;
      snprintf(durbuf, sizeof(durbuf), "%lld.%06lld",
               tv2 / 1000000, tv2 % 1000000);
%>
        <td class="b1"><s:v value="durbuf" /></td>
        <td class="b1"><%
%><s:url name="DeleteUrl" ac="testing-delete"><s:param name="queue" value="vec.v[i].queue_id" /><s:param name="packet" value="vec.v[i].entry_name" /></s:url><%
%><s:url name="UpUrl" ac="testing-up"><s:param name="queue" value="vec.v[i].queue_id" /><s:param name="packet" value="vec.v[i].entry_name" /></s:url><%
%><s:url name="DownUrl" ac="testing-down"><s:param name="queue" value="vec.v[i].queue_id" /><s:param name="packet" value="vec.v[i].entry_name" /></s:url><%
%><s:a url="DeleteUrl">X</s:a><%
%>&nbsp;&nbsp;<s:a url="UpUrl">Up</s:a><%
%>&nbsp;&nbsp;<s:a url="DownUrl">Down</s:a><%
%></td>
    </tr>
<%  } %>
</table>
</s:form>

<table class="b0"><tr>
<td class="b0"><s:a ac="main-page"><s:_>Main page</s:_></s:a></td>
<td class="b0"><s:a ac="testing-delete-all"><s:_>Delete all</s:_></s:a></td>
<td class="b0"><s:a ac="testing-up-all"><s:_>Up all</s:_></s:a></td>
<td class="b0"><s:a ac="testing-down-all"><s:_>Down all</s:_></s:a></td>
</tr></table>

<h2>Invokers</h2>

<table class="b1">
    <tr>
        <th class="b1">NN</th>
        <th class="b1">InvokerID</th>
        <th class="b1">IP address</th>
        <th class="b1">PID</th>
        <th class="b1">Run Queue</th>
        <th class="b1">Status<br/> Updated</th>
        <th class="b1">Status</th>
        <th class="b1">ContestID</th>
        <th class="b1">RunID</th>
        <th class="b1">User</th>
        <th class="b1">Problem</th>
        <th class="b1">Language</th>
        <th class="b1">Test</th>
        <th class="b1">Judge Request Time</th>
        <th class="b1">Judging Dur</th>
        <th class="b1">Testing Start<br/>Time</th>
        <th class="b1">Testing Dur</th>
        <th class="b1">Ops</th>
    </tr>
<%
  for (i = 0; i < srsv.u; ++i) {
    const struct super_run_status *srs = &srsv.v[i]->status;
    const unsigned char *super_run_id = super_run_status_get_str(srs, super_run_idx);
    const unsigned char *queue_name = super_run_status_get_str(srs, queue_idx);
    const unsigned char *user = super_run_status_get_str(srs, user_idx);
    const unsigned char *prob_short_name = super_run_status_get_str(srs, prob_idx);
    const unsigned char *lang_short_name = super_run_status_get_str(srs, lang_idx);
    const unsigned char *ip_address = super_run_status_get_str(srs, public_ip_idx);
    unsigned char status_update_buf[128];
    unsigned char status_buf[128];
    status_update_buf[0] = 0;
    if (current_time_ms + 10000 < srs->timestamp) {
      snprintf(status_update_buf, sizeof(status_update_buf), "<i>future</i>");
    } else if (srs->timestamp + 10000 >= current_time_ms) {
      snprintf(status_update_buf, sizeof(status_update_buf), "<b>now</b>");
    } else {
      long long diff = current_time_ms - srs->timestamp;
      if (diff < 120000) {
        snprintf(status_update_buf, sizeof(status_update_buf), "%d sec ago", (int)(diff / 1000));
      } else if (diff < 3600000) {
        snprintf(status_update_buf, sizeof(status_update_buf), "%d min ago", (int)(diff / 60000));
      } else {
        time_t tt = (int)(srs->timestamp / 1000);
        struct tm *ptm = localtime(&tt);
        snprintf(status_update_buf, sizeof(status_update_buf), "%04d-%02d-%02d %02d:%02d:%02d",
                 ptm->tm_year + 1900, ptm->tm_mon + 1, ptm->tm_mday,
                 ptm->tm_hour, ptm->tm_min, ptm->tm_sec);
      }
    }
    status_buf[0] = 0;
    if (srs->status == SRS_WAITING) {
      long long diff = srs->timestamp - srs->last_run_ts;
      if (diff < 5000) {
        snprintf(status_buf, sizeof(status_buf), "WAITING");
      } else if (diff < 120000) {
        snprintf(status_buf, sizeof(status_buf), "WAITING (%d secs)", (int)(diff / 1000));
      } else if (diff < 3600000) {
        snprintf(status_buf, sizeof(status_buf), "WAITING (%d mins)", (int)(diff / (60 * 1000)));
      } else if (diff < 24 * 60 * 60 * 1000) {
        snprintf(status_buf, sizeof(status_buf), "WAITING (%d hours)", (int)(diff / (60 * 60 * 1000)));
      } else {
        snprintf(status_buf, sizeof(status_buf), "WAITING (long time)");
      }
    } else if (srs->status == SRS_TESTING) {
        const unsigned char *down = "";
        const unsigned char *stop = "";
        if (srs->down_pending) down = "(D)";
        if (srs->stop_pending) stop = "(S)";
        snprintf(status_buf, sizeof(status_buf), "<b>TESTING</b>%s%s", stop, down);
    } else {
        snprintf(status_buf, sizeof(status_buf), "Unknown status %d", srs->status);
    }
%>
    <tr>
        <td class="b1"><s:v value="i + 1" /></td>
        <td class="b1"><s:v value="super_run_id" /></td>
        <td class="b1"><s:v value="ip_address" /></td>
        <td class="b1"><s:v value="srs->super_run_pid" /></td>
        <td class="b1"><s:v value="queue_name" /></td>
        <td class="b1"><s:v value="status_update_buf" escape="no" /></td>
        <td class="b1"><s:v value="status_buf" escape="no" /></td>
<%
    if (srs->status == SRS_TESTING) {
      time_t run_queue_time = srs->queue_ts / 1000;
      time_t testing_start_time = srs->testing_start_ts / 1000;
      long long judging_dur = 0;
      long long testing_dur = 0;
      if (srs->queue_ts > 0) {
        judging_dur = current_time_ms - srs->queue_ts;
      }
      if (judging_dur < 0) judging_dur = 0;
      judging_dur /= 1000;
      if (srs->testing_start_ts > 0) {
        testing_dur = current_time_ms - srs->testing_start_ts;
      }
      if (testing_dur < 0) testing_dur = 0;
      testing_dur /= 1000;
%>
        <td class="b1"><s:v value="srs->contest_id" /></td>
        <td class="b1"><s:v value="srs->run_id" /></td>
        <td class="b1"><s:v value="user" /></td>
        <td class="b1"><s:v value="prob_short_name" /></td>
        <td class="b1"><s:v value="lang_short_name" /></td>
        <td class="b1"><s:v value="srs->test_num" /><% if (srs->test_count) { %> / <s:v value="srs->test_count" /><% } %></td>
        <td class="b1"><% if (run_queue_time <= 0) { %>&nbsp;<% } else { %><s:v value="run_queue_time" /><% } %></td>
        <td class="b1"><% if (judging_dur <= 0) { %>&nbsp;<% } else { %><s:v value="judging_dur" /><% } %></td>
        <td class="b1"><% if (testing_start_time <= 0) { %>&nbsp;<% } else { %><s:v value="testing_start_time" /><% } %></td>
        <td class="b1"><% if (testing_dur <= 0) { %>&nbsp;<% } else { %><s:v value="testing_dur" /><% } %></td>
<%
    } else {
%>
        <td class="b1" colspan="10">&nbsp;</td>
<%
    }
%><%
%><s:url name="DeleteInvoker" ac="invoker-delete"><s:param name="queue" value="queue_name" /><s:param name="file" value="srsv.v[i]->file" /></s:url><%
%><s:url name="StopInvoker" ac="invoker-stop"><s:param name="queue" value="queue_name" /><s:param name="file" value="srsv.v[i]->file" /></s:url><%
%><s:url name="DownInvoker" ac="invoker-down"><s:param name="queue" value="queue_name" /><s:param name="file" value="srsv.v[i]->file" /></s:url><%
%><s:url name="RebootInvoker" ac="invoker-reboot"><s:param name="queue" value="queue_name" /><s:param name="file" value="srsv.v[i]->file" /></s:url><%
%>        <td class="b1"><s:a url="DeleteInvoker" title="Delete Status File">[X]</s:a> <s:a url="StopInvoker" title="Stop Invoker (if supported)">[S]</s:a> <s:a url="DownInvoker" title="Shutdown Invoker Host (if supported)">[D]</s:a> <s:a url="RebootInvoker" title="Reboot Invoker Host (if supported)">[R]</s:a></td>
    </tr>
<%
  }
%>
</table>

<h2>Compile Queues</h2>

<table class="b1">
    <tr>
        <th class="b1">NN</th>
        <th class="b1">Compile Queue</th>
        <th class="b1">Queue Length</th>
        <th class="b1">Oldest Item</th>
    </tr>
<%
  for (i = 0; i < cqi.su; ++i) {
    const struct compile_queue_stat *cqs = &cqi.s[i];
%>
    <tr>
        <td class="b1"><s:v value="i + 1" /></td>
        <td class="b1"><s:v value="cqs->queue_id" /></td>
        <td class="b1"><s:v value="cqs->count" /></td>
<%
    html_timestamp_with_ago_ms(durbuf, sizeof(durbuf), cqs->oldest_timestamp * 1000LL, current_time_ms);
%>
        <td class="b1"><s:v value="durbuf" escape="false" /></td>
    </tr>
<%
  }
%>
<table>

<h2>Compilers</h2>

<table class="b1">
    <tr>
        <th class="b1">NN</th>
        <th class="b1">InvokerID</th>
        <th class="b1">IP address</th>
        <th class="b1">PID</th>
        <th class="b1">Compile Queue</th>
        <th class="b1">Start Time</th>
        <th class="b1">Status Updated</th>
        <th class="b1">Last Request</th>
        <th class="b1">Request Count</th>
        <th class="b1">Accumulated Time (ms)</th>
        <th class="b1">Ops</th>
    </tr>
<%
  for (i = 0; i < chv.u; ++i) {
    ej_compile_Heartbeat_table_t h = ej_compile_Heartbeat_as_root(chv.v[i]->data);
    const unsigned char *chid = ej_compile_Heartbeat_instance_id_get(h);
    const unsigned char *chip = ej_compile_Heartbeat_ip_address_get(h);
    const unsigned char *chq = ej_compile_Heartbeat_queue_get(h);
    long long chstms = ej_compile_Heartbeat_start_time_ms_get(h);
    long long chtsms = ej_compile_Heartbeat_timestamp_ms_get(h);
    long long chlrms = ej_compile_Heartbeat_last_handled_request_ms_get(h);
    long long chacms = ej_compile_Heartbeat_accumulated_ms_get(h);
    long long chrq = ej_compile_Heartbeat_request_count_get(h);
    const unsigned char *queue_name = chv.v[i]->queue;
    const unsigned char *file = chv.v[i]->file;
    int pid = ej_compile_Heartbeat_pid_get(h);
%>
    <tr>
        <td class="b1"><s:v value="i + 1" /></td>
        <td class="b1"><s:v value="chid" checkExpr="" /></td>
        <td class="b1"><s:v value="chip" checkExpr="" /></td>
        <td class="b1"><s:v value="pid" /></td>
        <td class="b1"><s:v value="chq" checkExpr="" /></td>
<%
    html_timestamp_with_ago_ms(durbuf, sizeof(durbuf), chstms, current_time_ms);
%>
        <td class="b1"><s:v value="durbuf" escape="false" /></td>
<%
    html_timestamp_with_ago_ms(durbuf, sizeof(durbuf), chtsms, current_time_ms);
%>
        <td class="b1"><s:v value="durbuf" escape="false" /></td>
<%
    html_timestamp_with_ago_ms(durbuf, sizeof(durbuf), chlrms, current_time_ms);
%>
        <td class="b1"><s:v value="durbuf" escape="false" /></td>
        <td class="b1"><s:v value="chrq" /></td>
        <td class="b1"><s:v value="chacms" /></td>

<s:url name="DeleteCompiler" ac="compiler-op"><s:param name="queue" value="queue_name" /><s:param name="file" value="file" /><s:param name="op" value='"delete"' /></s:url><%
%><s:url name="StopCompiler" ac="compiler-op"><s:param name="queue" value="queue_name" /><s:param name="file" value="file" /><s:param name="op" value='"stop"' /></s:url><%
%><s:url name="DownCompiler" ac="compiler-op"><s:param name="queue" value="queue_name" /><s:param name="file" value="file" /><s:param name="op" value='"down"' /></s:url><%
%><s:url name="RebootCompiler" ac="compiler-op"><s:param name="queue" value="queue_name" /><s:param name="file" value="file" /><s:param name="op" value='"reboot"' /></s:url><%
%>        <td class="b1"><s:a url="DeleteCompiler" title="Delete Status File">[X]</s:a> <s:a url="StopCompiler" title="Stop Compiler (if supported)">[S]</s:a> <s:a url="DownCompiler" title="Shutdown Compiler Host (if supported)">[D]</s:a> <s:a url="RebootCompiler" title="Reboot Compiler Host (if supported)">[R]</s:a></td>

    </tr>
<%
  }
%>
</table>

<%@include "priv_footer.csp"
%><%
cleanup:
  l10n_resetlocale();
  testing_queue_array_free(&vec, 0);
  super_run_status_vector_free(&srsv, 0);
  compile_heartbeat_vector_free(&chv, 0);
  compile_queues_info_free(&cqi, 0);
  html_armor_free(&ab);
%>
