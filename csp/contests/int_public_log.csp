<%
%><%
// includes here
#include "ejudge/new-server.h"
#include "ejudge/new_server_pi.h"
#include "ejudge/new_server_proto.h"
#include "ejudge/external_action.h"
#include "ejudge/misctext.h"
#include "ejudge/runlog.h"
#include "ejudge/contests.h"
#include "ejudge/prepare.h"
#include "ejudge/html.h"
#include "ejudge/teamdb.h"

#include <libintl.h>

#define _(x) gettext(x)
%><%@set getter_name = "csp_get_int_public_log"
%><%@set ac_prefix = "NEW_SRV_ACTION_"
%><%@page csp_view_int_public_log(PageInterface *pg, FILE *log_f, FILE *out_f, struct http_request_info *phr)
%><%
    int retval __attribute__((unused)) = 0;
    struct html_armor_buffer ab __attribute__((unused)) = HTML_ARMOR_INITIALIZER;
    const struct contest_desc *cnts = phr->cnts;
    struct contest_extra *extra = phr->extra;
    serve_state_t cs = extra->serve_state;
    const struct section_global_data *global = cs->global;
    time_t start_time = run_get_start_time(cs->runlog_state);
    time_t stop_time = run_get_stop_time(cs->runlog_state, 0, 0);
    time_t duration = run_get_duration(cs->runlog_state, 0);
    const PublicLogExtraInfo *plei = (const PublicLogExtraInfo*) phr->extra_info;
    time_t cur_time = time(NULL);
    time_t duration_before_fog = -1;
    int fog_flag = 0;
    int unfog_flag = 0;
    unsigned char dur_buf[1024];
    unsigned char stat_buf[1024];
    int group_count;
    int group_scores[EJ_MAX_TEST_GROUP];
    int total_group_score;

    if (duration > 0 && global->board_fog_time) {
        duration_before_fog = duration - global->board_fog_time;
        if (duration_before_fog < 0) duration_before_fog = 0;
    }
    if (duration_before_fog >= 0 && cur_time > start_time + duration_before_fog) {
        fog_flag = 1;
    }
    if (duration_before_fog >= 0 && global->board_unfog_time >= 0) {
        time_t stop_time = stop_time;
        if (stop_time <= 0) stop_time = start_time + duration;
        if (cur_time > stop_time + global->board_unfog_time) {
            fog_flag = 0;
            unfog_flag = 1;
        }
    }
    (void) unfog_flag;

    int begin = run_get_first(cs->runlog_state);
    int total = run_get_total(cs->runlog_state);
    const struct run_entry *runs = run_get_entries_ptr(cs->runlog_state);
    int separate_user_score = global->separate_user_score > 0 && cs->online_view_judge_score <= 0;

    FILE *saved_out_f = out_f;
    char *title_s = NULL;
    size_t title_z = 0;
    out_f = open_memstream(&title_s, &title_z);

    %><s:_>Contest</s:_> &quot;<s:v value="cnts->name" checkExpr="" />&quot; - <%
    if (start_time <= 0) {
        %><s:_>Contest is not started</s:_><%
    } else {
        time_t rel_time = cur_time;
        if (rel_time < start_time) rel_time = start_time;
        if (stop_time > 0 && rel_time > stop_time) rel_time = stop_time;
        int show_astr_time = global->show_astr_time;
        if (show_astr_time) {
            duration_str(1, cur_time, start_time, dur_buf, 0);
        } else {
            duration_str(0, rel_time, start_time, dur_buf, 0);
        }
        %>[<s:v value="dur_buf" escape="no" />]<%
        if (stop_time > 0) {
            %>, <s:_>finished</s:_><%
            if (fog_flag) {
                %>, <s:_>frozen</s:_><%
            }
        } else {
            %>, <s:_>in progress</s:_><%
            if (fog_flag) {
                %>, <s:_>frozen</s:_><%
            }
        }
    }

    fclose(out_f); out_f = saved_out_f; saved_out_f = NULL;
    stand_write_header(out_f, plei->header_str, global->charset, title_s);
    free(title_s); title_s = NULL;

    if (start_time <= 0) goto cleanup;
%>

<h3><s:_>Total submissions</s:_>: <s:v value="total" /></h3>

<table border="1">
  <tr>
    <th><s:_>Run ID</s:_></th>
    <th><s:_>Time</s:_></th>
    <th><s:_>User name</s:_></th>
    <th><s:_>Problem</s:_></th>
    <th><s:_>Language</s:_></th>
    <th><s:_>Result</s:_></th>
<%
    if (global->score_system == SCORE_ACM) {
%>
    <th><s:_>Failed test</s:_></th>
<%
    } else if (global->score_system == SCORE_MOSCOW) {
%>
    <th><s:_>Failed test</s:_></th>
    <th><s:_>Score</s:_></th>
<%
    } else {
%>
    <th><s:_>Tests passed</s:_></th>
    <th><s:_>Score</s:_></th>
<%
    }
%>
  </tr>
<%
    int i;
    for (i = total - 1; i >= begin; --i) {
        const struct run_entry *pe = &runs[i];
        if (pe->is_hidden) continue;
        int status = pe->status;
        if (separate_user_score > 0 && pe->is_saved) {
           status = pe->saved_status;
        }
        struct section_problem_data *cur_prob = NULL;
        if (pe->prob_id > 0 && pe->prob_id <= cs->max_prob)
            cur_prob = cs->probs[pe->prob_id];
        struct section_language_data *cur_lang = NULL;
        if (pe->lang_id > 0 && pe->lang_id <= cs->max_lang)
            cur_lang = cs->langs[pe->lang_id];
        time_t run_time = pe->time;
        if (run_time < start_time) run_time = start_time;
        time_t run_duration = run_time - start_time;

        if (fog_flag) {
            if (run_duration >= duration_before_fog) {
                // FIXME: report some info about run?
                continue;
            }
        }

        int attempts = 0;
        int disq_attempts = 0;
        int ce_attempts = 0;
        int prev_successes = RUN_TOO_MANY;
        time_t effective_time = 0;
        time_t *p_eff_time = NULL;
        if (cur_prob && cur_prob->enable_submit_after_reject > 0) {
            p_eff_time = &effective_time;
        }
        total_group_score = -1;
        if (global->score_system == SCORE_KIROV) {
            int ice = 0;
            int cep = -1;
            int egm = 0;
            if (cur_prob) {
                ice = cur_prob->ignore_compile_errors;
                cep = cur_prob->compile_error_penalty;
                egm = cur_prob->enable_group_merge;
            }
            run_get_attempts(cs->runlog_state, i, &attempts, &disq_attempts, &ce_attempts,
                             p_eff_time,
                             ice, cep, egm,
                             &group_count, group_scores);
            if (status == RUN_OK && cur_prob && cur_prob->score_bonus_total > 0) {
                prev_successes = run_get_prev_successes(cs->runlog_state, i);
                if (prev_successes < 0) prev_successes = RUN_TOO_MANY;
            }
            if (egm > 0) {
                total_group_score = 0;
                if (separate_user_score > 0) {
                    for (int i = 0; i < group_count; ++i) {
                        if (group_scores[i] > 0) {
                            total_group_score += group_scores[i];
                        }
                    }
                } else {
                    for (int i = 0; i < group_count; ++i) {
                        if (group_scores[i] >= 0) {
                            total_group_score += group_scores[i];
                        } else {
                            total_group_score -= group_scores[i];
                        }
                    }
                }
            }
        }
        duration_str(global->show_astr_time, run_time, start_time, dur_buf, 0);
        run_status_str(status, stat_buf, sizeof(stat_buf), 0, 0);
%>
  <tr>
    <td><s:v value="i" /></td>
    <td><s:v value="dur_buf" escape="no" /></td>
    <td><s:v value="teamdb_get_name_2(cs->teamdb_state, pe->user_id)" /></td>
    <td><%
        if (cur_prob) {
            %><s:v value="cur_prob->short_name" /><%
            if (cur_prob->variant_num > 0) {
                %>-<%
                int variant = pe->variant;
                if (!variant) variant = find_variant(cs, pe->user_id, pe->prob_id, 0);
                if (variant > 0) {
                    %><s:v value="variant" /><%
                } else {
                    %>?<%
                }
            }
        } else {
            %>??? - <s:v value="pe->prob_id" /><%
        }
%></td>
    <td><%
        if (cur_lang) {
            %><s:v value="cur_lang->short_name" /><%
        } else {
            %>??? - <s:v value="pe->lang_id" /><%
        }
%></td>
<%
        write_html_run_status(cs, out_f, start_time, pe, 1,
                              0, attempts, disq_attempts, ce_attempts,
                              prev_successes, 0, 1, 0, RUN_VIEW_DEFAULT,
                              effective_time,
                              total_group_score, -100);
%>
  </tr>
<%
    }
%>
</table>
<%
cleanup:;
    stand_write_footer(out_f, plei->footer_str);
    html_armor_free(&ab);
%>
