<%
%><%@include "priv_includes.csp"
%><%
void
ns_unparse_statement(
        FILE *fout,
        struct http_request_info *phr,
        const struct contest_desc *cnts,
        struct contest_extra *extra,
        const struct section_problem_data *prob,
        int variant,
        problem_xml_t px,
        const unsigned char *bb,
        int is_submittable);

void
ns_unparse_answers(
        FILE *fout,
        struct http_request_info *phr,
        const struct contest_desc *cnts,
        struct contest_extra *extra,
        const struct section_problem_data *prob,
        int variant,
        problem_xml_t px,
        const unsigned char *lang,
        int is_radio,
        int last_answer,
        int next_prob_id,
        int enable_js,
        const unsigned char *class_name);
%><%@set getter_name = "csp_get_priv_submit_page"
%><%@set ac_prefix = "NEW_SRV_ACTION_"
%><%@set err_prefix = "NEW_SRV_ERR_"
%><%@page csp_view_priv_submit_page(PageInterface *pg, FILE *log_f, FILE *out_f, struct http_request_info *phr)
%><%@include "priv_stdvars.csp"
%><%
  const struct section_problem_data *prob = 0;
  const struct section_global_data *global = 0;
  int prob_id = 0, variant = 0, i;
  int lang_id = 0;
  problem_xml_t px = 0;
  struct watched_file *pw = 0;
  const unsigned char *pw_path = 0;
  path_t variant_stmt_file;
  unsigned char title[1024];
  int enable_main_menu = 0;

  if (cs) global = cs->global;

%><s:read var="prob_id" name="problem" default="0" error="inv-run-id" /><%
  if (prob_id < 0 || prob_id > cs->max_prob) {
    FAIL(NEW_SRV_ERR_INV_PROB_ID);
  }
  if (prob_id > 0 && !(prob = cs->probs[prob_id])) {
    FAIL(NEW_SRV_ERR_INV_PROB_ID);
  }
%><s:read var="variant" error="inv-variant" /><%
  if (!prob) variant = 0;
  if (prob && prob->variant_num <= 0) variant = 0;
  if (variant < 0
      || (prob && prob->variant_num <= 0 && variant > 0)
      || (prob && prob->variant_num > 0 && variant > prob->variant_num)) {
    FAIL(NEW_SRV_ERR_INV_VARIANT);
  }
%><s:read var="lang_id" default="0" /><%
  if (lang_id <= 0 || lang_id > cs->max_lang || !cs->langs[lang_id]) lang_id = 0;

  if (opcaps_check(phr->caps, OPCAP_SUBMIT_RUN) < 0) {
    FAIL(NEW_SRV_ERR_PERMISSION_DENIED);
  }

  l10n_setlocale(phr->locale_id);
  if (prob && variant > 0) {
    snprintf(title, sizeof(title), "%s %s-%d", _("Submit a solution for"), prob->short_name, variant);
  } else if (prob) {
    snprintf(title, sizeof(title), "%s %s", _("Submit a solution for"), prob->short_name);
  } else {
    snprintf(title, sizeof(title), "%s", _("Submit a solution"));
  }
%><%@include "priv_header.csp"
%>
</div>

<% if (prob) { %>
<h2><s:_>Problem</s:_> <s:v value="prob->short_name" escape="false"/><s:v value="prob->internal_name" checkExpr="" sep=": " />: <s:v value="prob->long_name" checkExpr="" /></h2>
<% } %>

<s:form enctype="multipart/form-data">

<table class="b0"><tr><%
  int prev_prob_id = prob_id - 1;
  while (prev_prob_id > 0 && !cs->probs[prev_prob_id]) {
    --prev_prob_id;
  }
  if (prev_prob_id > 0) {
%><td><s:url name="PrevProbUrl" ac="priv-submit-page"><s:param name="problem" value="prev_prob_id" /></s:url><s:a url="PrevProbUrl">[Prev Problem]</s:a></td><%
  }
%><td class="b0"><s:_>Problem</s:_>:</td><td class="b0"><s:select name="problem"><%
  for (i = 1; i <= cs->max_prob; i++) {
    if (!(cs->probs[i])) continue;
%><s:option value="i" selectedExpr="prob_id > 0 && i == prob_id"><s:v value="cs->probs[i]->short_name" escape="false" /><s:v value="cs->probs[i]->internal_name" checkExpr="" sep=" - " /> - <s:v value="cs->probs[i]->long_name" checkExpr="" /></s:option><%
  }
%></s:select></td><td class="b0"><s:submit ac="priv-submit-page" /></td><%
  int next_prob_id = prob_id + 1;
  while (next_prob_id <= cs->max_prob && !cs->probs[next_prob_id]) {
    ++next_prob_id;
  }
%><%
  if (next_prob_id <= cs->max_prob) {
%><td><s:url name="NextProbUrl" ac="priv-submit-page"><s:param name="problem" value="next_prob_id" /></s:url><s:a url="NextProbUrl">[Next Problem]</s:a></td><%
  }
%></tr>
<% if (prob && prob->variant_num > 0) { %>
<tr><td class="b0"><s:_>Variant</s:_>:</td><td class="b0"><s:select name="variant"><%
    for (i = 0; i <= prob->variant_num; i++) {
%><s:option value="i" selectedExpr="i == variant"><s:v value="i" checkExpr=" > 0" /></s:option><%
    }
%></s:select></td><td class="b0"><s:submit ac="priv-submit-page" label="Select variant" /></td>
</tr>
<% } %>
</table>




<table>
    <tr><td><b>Prob Id:</b></td><td><tt><s:v value="prob_id" /></tt></td></tr>
<%
        if (prob && prob->type == PROB_TYPE_STANDARD) {
%>
<%
          if (global->score_system == SCORE_KIROV) {
%>
    <tr><td><b><s:_>Full score</s:_>:</b></td><td><tt><s:v value="prob->full_score" /></tt></td></tr>
<%
            if (prob->run_penalty != -1 && prob->run_penalty != 0) {
%>
    <tr><td><b><s:_>Run penalty</s:_>:</b></td><td><tt><s:v value="prob->run_penalty" /></tt></td></tr>
<%
            }
%>
<%
            if (prob->score_bonus) {
%>
    <tr><td><b><s:_>Score bonus</s:_>:</b></td><td><tt><s:v value="prob->score_bonus" /></tt></td></tr>
<%
            }
%>
<%
          }
%>
<%
          if (prob->combined_stdin > 0 && prob->input_file && prob->input_file[0] && prob->hide_file_names <= 0) {
%>
    <tr><td><b><s:_>Input file name</s:_>:</b></td><td><tt><s:v value="prob->input_file" /></tt><s:_> or standard input</s:_></td></tr>
<%
          } else if (prob->use_stdin <= 0 && prob->input_file && prob->input_file[0] && prob->hide_file_names <= 0) {
%>
    <tr><td><b><s:_>Input file name</s:_>:</b></td><td><tt><s:v value="prob->input_file" /></tt></td></tr>
<%
          }
%>
<%
          if (prob->combined_stdout > 0 && prob->output_file && prob->output_file[0] && prob->hide_file_names <= 0) {
%>
    <tr><td><b><s:_>Output file name</s:_>:</b></td><td><tt><s:v value="prob->output_file" /></tt><s:_> or standard output</s:_></td></tr>
<%
          } else if (prob->use_stdout <= 0 && prob->output_file && prob->output_file[0] && prob->hide_file_names <= 0) {
%>
    <tr><td><b><s:_>Output file name</s:_>:</b></td><td><tt><s:v value="prob->output_file" /></tt></td></tr>
<%
          }
%>
<%
          if (prob->time_limit_millis > 0) {
%>
    <tr><td><b><s:_>Time limit</s:_>:</b></td><td><tt><s:v value="prob->time_limit_millis" /> <s:_>ms</s:_></tt></td></tr>
<%
          } else if (prob->time_limit > 0) {
%>
    <tr><td><b><s:_>Time limit</s:_>:</b></td><td><tt><s:v value="prob->time_limit" /> <s:_>s</s:_></tt></td></tr>
<%
          }
%>
<%
          if (prob->real_time_limit > 0 && prob->hide_real_time_limit <= 0) {
%>
    <tr><td><b><s:_>Real time limit</s:_>:</b></td><td><tt><s:v value="prob->real_time_limit" /> <s:_>s</s:_></tt></td></tr>
<%
          }
%>
<%
          if (prob->max_vm_size >= 0) {
%>
    <tr><td><b><s:_>Memory limit</s:_>:</b></td><td><tt><s:v format="V" value="prob->max_vm_size" /></tt></td></tr>
<%
          }
%>
<%
          if (prob->max_rss_size >= 0) {
%>
    <tr><td><b><s:_>Memory RSS limit</s:_>:</b></td><td><tt><s:v format="V" value="prob->max_rss_size" /></tt></td></tr>
<%
          }
%>
<%
          if (prob->max_stack_size >= 0 && prob->max_stack_size != prob->max_vm_size) {
%>
    <tr><td><b><s:_>Stack limit</s:_>:</b></td><td><tt><s:v format="V" value="prob->max_stack_size" /></tt></td></tr>
<%
          }
%>
<%
        }
%>

<%
        if (prob && prob->start_date > 0) {
%>
    <tr><td><b><s:_>Open date</s:_>:</b></td><td><tt><s:v value="prob->start_date" /></tt></td></tr>
<%
        }
%>

<%
        if (prob && prob->problem_dir && prob->problem_dir[0]) {
%>
    <tr><td><b><s:_>Problem directory</s:_>:</b></td><td><tt><s:v value="prob->problem_dir" /></tt></td></tr>
<%
        }
%>

</table>

<s:submit ac="reload-statement" />
<s:submit ac="reload-statement-all" />

<%
  /* output the problem statement */
  px = 0; pw = 0; pw_path = 0;
  if (prob && prob->variant_num > 0 && variant > 0 && prob->xml.a
      && prob->xml.a[variant - 1]) {
    px = prob->xml.a[variant - 1];
  } else if (prob && prob->variant_num <= 0 && prob->xml.p) {
    px = prob->xml.p;
  }
  if (px && px->stmts) {
    ns_unparse_statement(out_f, phr, cnts, extra, prob, variant, px, NULL, 1);
  }

  if (!px && prob && prob->statement_file && prob->statement_file[0]) {
    if (prob->variant_num > 0 && variant > 0) {
      prepare_insert_variant_num(variant_stmt_file,
                                 sizeof(variant_stmt_file),
                                 prob->statement_file, variant);
      pw = &cs->prob_extras[prob_id].v_stmts[variant];
      pw_path = variant_stmt_file;
    } else if (prob->variant_num <= 0) {
      pw = &cs->prob_extras[prob_id].stmt;
      pw_path = prob->statement_file;
    }
    if (pw) {
      watched_file_update(pw, pw_path, cs->current_time);
    }
    if (!pw || !pw->text) {
%><big><font color="red"><p><s:_>The problem statement is not available</s:_></p></font></big><%
    } else {
      fprintf(out_f, "%s", pw->text);
    }
  }
%>

<table class="b0">

<%  if (!prob || !prob->type) { %>
<tr>
<td class="b0"><s:_>Language</s:_>:</td><td class="b0"><s:select name="lang_id"><option value=""></option><%
    if (!prob || !prob->custom_compile_cmd || !prob->custom_compile_cmd[0]) {
    for (i = 1; i <= cs->max_lang; i++) {
      const struct section_language_data *cl = cs->langs[i];
      if (!cl || cl->disabled > 0) continue;
      if (prob) {
        char **ll;
        int li;
        if ((ll = prob->enable_language)) {
          for (li = 0; ll[li]; ++li)
            if (!strcmp(ll[li], cl->short_name))
              break;
          if (!ll[li]) continue;
        } else if ((ll = prob->disable_language)) {
          for (li = 0; ll[li]; ++li)
            if (!strcmp(ll[li], cl->short_name))
              break;
          if (ll[li]) continue;
        }
      }
%><s:option value="i" selectedExpr="i == lang_id"><s:v value="cl->short_name" escape="false" /> - <s:v value="cl->long_name" checkExpr="" /></s:option><%
    }
    } else {
      for (i = 1; i <= cs->max_lang; ++i) {
        if (cs->langs[i] && cs->langs[i]->enable_custom > 0) {
          break;
        }
      }
      if (i <= cs->max_lang) {
%><option value='<s:v value="i"/>'><s:v escape="0" value="cs->langs[i]->short_name" /> - <s:v value="prob->custom_lang_name" checkExpr="" /></option><%
      }
    }
%></s:select></td></tr>

<% if (cs->global->enable_eoln_select > 0) { %>
<tr><td class="b0"><s:_>EOLN Type</s:_>:</td><td class="b0"><s:select name="eoln_type">
<option value="0"></option>
<option value="1">LF (Unix/MacOS)</option>
<option value="2">CRLF (Windows/DOS)</option>
</s:select></td></tr>
<% } %>
<% } %>

<%  if (!prob /*|| !prob->type*/) {
%><tr><td class="b0"><s:_>File</s:_></td><td class="b0"><input type="file" name="file" /></td></tr><%
   } else {
    switch (prob->type) {
    case PROB_TYPE_STANDARD:
    case PROB_TYPE_OUTPUT_ONLY:
    case PROB_TYPE_TESTS:
      if (prob->enable_text_form > 0) {
%><tr><td colspan="2" class="b0"><textarea name="text_form" rows="20" cols="60"></textarea></td></tr><%
      }
%><tr><td class="b0"><s:_>File</s:_></td><td class="b0"><input type="file" name="file"/></td></tr><%
      break;
    case PROB_TYPE_SHORT_ANSWER:
%><tr><td class="b0"><s:_>Answer</s:_></td><td class="b0"><input type="text" name="file" /></td></tr><%
      break;
    case PROB_TYPE_TEXT_ANSWER:
%><tr><td colspan="2" class="b0"><textarea name="file" rows="20" cols="60"></textarea></td></tr><%
      break;
    case PROB_TYPE_SELECT_ONE:
      if (px) {
        ns_unparse_answers(out_f, phr, cnts, extra, prob, variant,
                           px, 0 /* lang */, 1 /* is_radio */,
                           -1, prob_id, 0 /* js_flag */, "b0");
      } else if (prob->alternative) {
        for (i = 0; prob->alternative[i]; i++) {
%><tr><td class="b0"><s:v value="i + 1" /></td><td class="b0"><s:radio name="file" value="i+1"/></td><td class="b0"><s:v value="prob->alternative[i]" escape="false" /></td></tr><%
        }
      }
      break;
    case PROB_TYPE_SELECT_MANY:
      if (prob->alternative) {
        for (i = 0; prob->alternative[i]; i++) {
%><tr><td class="b0"><s:v value="i + 1" /></td><td class="b0"><input type="checkbox" name="ans_<s:v value="i + 1" />" /></td><td class="b0"><s:v value="prob->alternative[i]" /></td></tr><%
        }
      }
      break;
    case PROB_TYPE_CUSTOM:
      break;

    default:
      abort();
    }
  }
%>
<tr><td class="b0">&nbsp;</td><td class="b0"><s:submit ac="submit-run" /></td></tr>
<tr><td class="b0">&nbsp;</td><td class="b0"><s:a ac="main-page"><s:_>Main page</s:_></s:a></td></tr>
</table>
</s:form>

<%@include "priv_footer.csp"
%><%
cleanup:
  l10n_resetlocale();
  html_armor_free(&ab);
%>
