<%
%><%@include "priv_includes.csp"
%><%
#include "ejudge/ej_uuid.h"
#include "ejudge/mime_type.h"
#include "ejudge/charsets.h"
#include "ejudge/fileutl.h"
#include "ejudge/testing_report_xml.h"
#include "ejudge/content_plugin.h"
%><%@set getter_name = "csp_get_priv_source_page"
%><%@set ac_prefix = "NEW_SRV_ACTION_"
%><%@set err_prefix = "NEW_SRV_ERR_"
%><%@page csp_view_priv_source_page(PageInterface *pg, FILE *log_f, FILE *out_f, struct http_request_info *phr)
%><%@include "priv_stdvars.csp"
%><%
  path_t src_path;
  struct run_entry info;
  char *src_text = 0; //, *html_text;
  //unsigned char *numb_txt;
  size_t src_len; //, html_len, numb_len;
  time_t start_time;
  int variant = 0, src_flags;
  unsigned char filtbuf1[128];
  time_t run_time;
  int run_id2 = 0;
  unsigned char bb[1024];
  const struct section_problem_data *prob = 0;
  const struct section_language_data *lang = 0;
  const struct section_global_data *global = cs->global;
  const unsigned char *run_charset = 0;
  int charset_id = 0;
  int txt_flags = 0;
  path_t txt_path = { 0 };
  char *txt_text = 0;
  size_t txt_size = 0;
  unsigned char title[1024];
  int run_id;
  int enable_main_menu = 0;
  int rep_flag = 0;
  path_t rep_path;
  char *rep_text = NULL;
  size_t rep_len = 0;
  testing_report_xml_t tr = NULL;
  unsigned char *compiler_output = NULL;
  struct full_clar_entry_vector fcev = {};
  struct full_clar_entry_vector fcev2 = {};
  int i;
  problem_xml_t px = 0;
  int other_runs_count = 0;
  struct run_entry *other_runs = NULL;
  int uuid_count = 0;
  ej_uuid_t *other_uuids = NULL;
  const struct userlist_user *u = NULL;
  const struct userlist_user_info *ui = NULL;
  unsigned char avatar_url[1024];

  avatar_url[0] = 0;

  if (ns_parse_run_id(out_f, phr, cnts, extra, &run_id, 0) < 0)
    FAIL(NEW_SRV_ERR_INV_RUN_ID);

  if (opcaps_check(phr->caps, OPCAP_VIEW_SOURCE) < 0) {
    FAIL(NEW_SRV_ERR_PERMISSION_DENIED);
  }

%><s:read var="run_charset" ignoreerrors="yes" /><%
  if (run_charset && !*run_charset) run_charset = NULL;

  if (run_id < 0 || run_id >= run_get_total(cs->runlog_state)) {
    FAIL(NEW_SRV_ERR_INV_RUN_ID);
  }
  run_get_entry(cs->runlog_state, run_id, &info);
  if (!run_is_normal_or_transient_status(info.status)) {
    FAIL(NEW_SRV_ERR_SOURCE_UNAVAILABLE);
  }

  src_flags = serve_make_source_read_path(cs, src_path, sizeof(src_path), &info);
  if (src_flags < 0) {
    FAIL(NEW_SRV_ERR_SOURCE_NONEXISTANT);
  }

  if (info.prob_id > 0 && info.prob_id <= cs->max_prob)
    prob = cs->probs[info.prob_id];
  if (info.lang_id > 0 && info.lang_id <= cs->max_lang)
    lang = cs->langs[info.lang_id];

  run_fetch_user_runs(cs->runlog_state, 0, run_id, info.user_id, info.prob_id, &other_runs_count, &other_runs);
  for (int i = 0; i < other_runs_count; ++i) {
    if (ej_uuid_is_nonempty(other_runs[i].run_uuid)) {
      ++uuid_count;
    }
  }
  if (uuid_count > 0) {
    int out_ind = 0;
    XCALLOC(other_uuids, uuid_count);
    for (int i = 0; i < other_runs_count; ++i) {
      if (ej_uuid_is_nonempty(other_runs[i].run_uuid)) {
        memcpy(&other_uuids[out_ind++], &other_runs[i].run_uuid, sizeof(ej_uuid_t));
      }
    }
  }

  run_time = info.time;
  if (run_time < 0) run_time = 0;
  start_time = run_get_start_time(cs->runlog_state);
  if (start_time < 0) start_time = 0;
  if (run_time < start_time) run_time = start_time;

  rep_flag = serve_make_xml_report_read_path(cs, rep_path, sizeof(rep_path), &info);
  if (rep_flag >= 0) {
    if (generic_read_file(&rep_text, 0, &rep_len, rep_flag, 0, rep_path, 0) >= 0) {
      const unsigned char *start_ptr = NULL;
      int content_type = get_content_type(rep_text, &start_ptr);
      if (content_type == CONTENT_TYPE_XML && start_ptr) {
        tr = testing_report_parse_xml(start_ptr);
        if (tr && tr->compiler_output) {
          compiler_output = tr->compiler_output; tr->compiler_output = NULL;
        }
        testing_report_free(tr); tr = NULL;
      }
      xfree(rep_text); rep_text = NULL; rep_len = 0;
    }
  }

  if (!compiler_output) {
    txt_flags = serve_make_report_read_path(cs, txt_path, sizeof(txt_path), &info);
    if (txt_flags >= 0) {
      if (generic_read_file(&txt_text, 0, &txt_size, txt_flags, 0, txt_path, 0) >= 0) {
        compiler_output = txt_text; txt_text = 0; txt_size = 0;
      }
    }
  }

  if (ej_uuid_is_nonempty(info.run_uuid)) {
    clar_fetch_run_messages(cs->clarlog_state, &info.run_uuid, &fcev);
  }
  if (uuid_count > 0) {
    clar_fetch_run_messages_2(cs->clarlog_state, uuid_count, other_uuids, &fcev2);
  }
  if (fcev2.u > 0) {
    // fix run_id for fetched clars
    for (int i = 0; i < fcev2.u; ++i) {
      if (ej_uuid_is_nonempty(fcev2.v[i].e.run_uuid)) {
        const ej_uuid_t *uuid1 = &fcev2.v[i].e.run_uuid;
        for (int j = 0; j < other_runs_count; ++j) {
          if (ej_uuid_is_nonempty(other_runs[j].run_uuid) &&
              other_runs[j].run_uuid.v[0] == uuid1->v[0] &&
              other_runs[j].run_uuid.v[1] == uuid1->v[1] &&
              other_runs[j].run_uuid.v[2] == uuid1->v[2] &&
              other_runs[j].run_uuid.v[3] == uuid1->v[3]) {
            fcev2.v[i].e.run_id = other_runs[j].run_id;
          }
        }
      }
    }
  }

  u = teamdb_get_userlist(cs->teamdb_state, info.user_id);
  if (u) ui = u->cnts0;
  if (ui && ui->avatar_id && ui->avatar_id[0]) {
    struct content_loaded_plugin *cp = content_plugin_get(phr->extra, phr->cnts, phr->config, NULL);
    int content_enabled = 0;
    if (cp) {
      content_enabled = cp->iface->is_enabled(cp->data, phr->cnts);
    }
    if (content_enabled) {
      cp->iface->get_url(cp->data, avatar_url, sizeof(avatar_url),
                         phr->cnts, ui->avatar_id, ui->avatar_suffix);
    } else {
      snprintf(avatar_url, sizeof(avatar_url), "%s?SID=%llx&key=%s&action=%d",
               phr->self_url, phr->session_id, ui->avatar_id, NEW_SRV_ACTION_GET_AVATAR);
    }
  }

  snprintf(title, sizeof(title), "%s %d", _("Viewing run"), run_id);
%><%@include "priv_header.csp"
%>
<s:url name="ViewSourceUrl" ac="view-source">
    <s:param name="run_id" value="run_id" />
</s:url>
<s:url name="ViewReportUrl" ac="view-report">
    <s:param name="run_id" value="run_id" />
</s:url>
<s:url name="ViewUserReportUrl" ac="view-user-report">
    <s:param name="run_id" value="run_id" />
</s:url>
<s:url name="ViewAuditLogUrl" ac="view-audit-log">
    <s:param name="run_id" value="run_id" />
</s:url>

<div id="main-menu">
<ul>
<li><s:a ac="main-page"><s:_>Main page</s:_></s:a></li>
<li><s:a class="current" url="ViewSourceUrl"><s:_>Source</s:_></s:a></li>
<li><s:a url="ViewReportUrl"><s:_>Report</s:_></s:a></li>
<li><s:a url="ViewUserReportUrl"><s:_>User report</s:_></s:a></li>
<li><s:a url="ViewAuditLogUrl"><s:_>Audit log</s:_></s:a></li>
</ul></div>
</div>

<s:url name="PrivEditRunPageUrl" ac="priv-edit-run-page">
    <s:param name="run_id" value="run_id" />
</s:url>

<div id="info-brief">
<div class="h2-long" style="margin-top: 0;"><h2><s:_>Information about run</s:_> <s:v value="run_id" /><%
  if (phr->role == USER_ROLE_ADMIN && opcaps_check(phr->caps, OPCAP_EDIT_RUN) >= 0) {
%> [<s:a url="PrivEditRunPageUrl"><s:_>Edit</s:_></s:a>]
<% } %></h2></div>

<div class="table-scroll" style="margin-top: -10px; margin-bottom: 5px;">
<table class="table">
<tr>
<% if (avatar_url[0]) { %>
    <th><s:_>Avatar</s:_></th>
<% } %>
    <th style="width: 10em;"><s:_>Run ID</s:_></th>
    <th><s:_>Submission time</s:_></th>
    <th><s:_>Originator IP</s:_></th>
    <th><s:_>User ID</s:_></th>
    <th><s:_>User login</s:_></th>
    <th><s:_>User name</s:_></th>
    <th><s:_>Problem</s:_></th>
<% if (prob && prob->variant_num > 0) { %>
    <th><s:_>Variant</s:_></th>
<% } %>
    <th><s:_>Language</s:_></th>
    <th><s:_>EOLN Type</s:_></th>
    <th><s:_>Status</s:_></th>
<%
  if (info.passed_mode > 0) {
%>
    <th><s:_>Tests passed</s:_></th>
<%
  }
%>
<%
  if (global->score_system == SCORE_KIROV || global->score_system == SCORE_OLYMPIAD) {
    if (info.passed_mode <= 0) {
%>
    <th><s:_>Tests passed</s:_></th>
<%
    }
%>
    <th><s:_>Score gained</s:_></th>
<%
  } else if (global->score_system == SCORE_MOSCOW) {
    if (info.passed_mode <= 0) {
%>
    <th><s:_>Failed test</s:_></th>
<%
    }
%>
    <th><s:_>Score gained</s:_></th>
<%
  } else {
    if (info.passed_mode <= 0) {
%>
    <th><s:_>Failed test</s:_></th>
<%
    }
  }
%>
    <th><s:_>Marked?</s:_></th>
</tr>
<tr>
<% if (avatar_url[0]) { %>
    <td class="userpic"><img src="<s:v value="avatar_url" escape="no" />" alt="avatar" /></td>
<% } %>
    <td><s:v value="info.run_id" /></td>
    <td><s:v value="info.time" /></td>
<% snprintf(filtbuf1, sizeof(filtbuf1), "ip == ip(%d)", run_id); %>
<s:url name="FilteredMainUrl" ac="main-page">
    <s:param name="filter_expr" value="filtbuf1" />
</s:url>
    <td><s:a url="FilteredMainUrl"><s:v value="info.a.ip" /></s:a></td>
<% snprintf(filtbuf1, sizeof(filtbuf1), "uid == %d", info.user_id); %>
<s:url name="FilteredMainUrl" ac="main-page">
    <s:param name="filter_expr" value="filtbuf1" />
</s:url>
    <td><s:a url="FilteredMainUrl"><s:v value="info.user_id" /></s:a></td>
    <td><s:v value="teamdb_get_login_2(cs->teamdb_state, info.user_id)" /></td>
    <td><s:v value="teamdb_get_name_2(cs->teamdb_state, info.user_id)" /></td>
<% if (prob) { %>
<% snprintf(filtbuf1, sizeof(filtbuf1), "uid == %d && prob == \"%s\"",  info.user_id, prob->short_name); %>
<s:url name="FilteredMainUrl" ac="main-page">
    <s:param name="filter_expr" value="filtbuf1" />
</s:url>
    <td><s:a url="FilteredMainUrl"><s:v value="prob->short_name" escape="false" /> - <s:v value="prob->long_name" checkExpr="" /></s:a><%
    if (prob->xml_file && prob->xml_file[0]) {
%><s:url name="SubmitPageUrl" ac="priv-submit-page"><s:param name="problem" value="prob->id" /></s:url> <s:a url="SubmitPageUrl">[<s:_>Statement</s:_>]</s:a><%
    }
%></td>
<% } else { %>
    <td>#<s:v value="info.prob_id" /></td>
<% } %>

<% if (prob && prob->variant_num > 0) {
    variant = info.variant;
    if (!variant) variant = find_variant(cs, info.user_id, info.prob_id, 0);
    if (variant > 0) {
%>
<% snprintf(filtbuf1, sizeof(filtbuf1), "prob == \"%s\" && variant == %d", prob->short_name, variant); %>
<s:url name="FilteredMainUrl" ac="main-page">
    <s:param name="filter_expr" value="filtbuf1" />
</s:url>
     <td><s:a url="FilteredMainUrl"><%
      if (info.variant > 0) {
%><s:v value="(int) info.variant" /><%
      } else {
%><s:v value="variant" /> (implicit)<%
      }
%></s:a></td>
<%    } else { %>
<td><i>unassigned</i></td>
<%    } %>
<% } %>

<%  if (lang) { %>
<% snprintf(filtbuf1, sizeof(filtbuf1), "lang == \"%s\"", lang->short_name); %>
<s:url name="FilteredMainUrl" ac="main-page">
    <s:param name="filter_expr" value="filtbuf1" />
</s:url>
<td><s:a url="FilteredMainUrl" ><s:v escape="false" value="lang->short_name" /> - <s:v value="lang->long_name" checkExpr="" /></s:a></td>
<%  } else if (!info.lang_id) { %>
<td>N/A</td>
<%  } else { %>
<td>#<s:v value="info.lang_id" /></td>
<%  } %>

<td><s:v type="eoln_type" value="info.eoln_type" /></td>

<%
  run_status_to_str_short(bb, sizeof(bb), info.status);
  snprintf(filtbuf1, sizeof(filtbuf1), "status == %s", bb);
%>
<td><s:a url="FilteredMainUrl"><s:v type="run_status" value="info.status" /></s:a></td>

<%
  if (info.passed_mode > 0) {
%>
    <td><s:v value="info.test" checkExpr=">= 0" defstr="N/A" /></td>
<%
  }
%>
<%
  if (global->score_system == SCORE_KIROV || global->score_system == SCORE_OLYMPIAD) {
    if (info.passed_mode <= 0) {
%>
    <td><s:v value="info.test - 1" checkExpr=">= 0" defstr="N/A" /></td>
<%
    }
%>
    <td><s:v value="info.score" checkExpr=">= 0" defstr="N/A" /></td>
<%
  } else if (global->score_system == SCORE_MOSCOW) {
    if (info.passed_mode <= 0) {
%>
    <td><s:v value="info.test" checkExpr="> 0" defstr="N/A" /></td>
<%
    }
%>
    <td><s:v value="info.score" checkExpr=">= 0" defstr="N/A" /></td>
<%
  } else {
    if (info.passed_mode <= 0) {
%>
    <td><s:v value="info.test" checkExpr="> 0" defstr="N/A" /></td>
<%
    }
  }
%>

    <td><s:vb value="info.is_marked" /></td></tr>
</table></div>

<script language="javascript">
function setDivVisibility(oper, value)
{
  obj1 = document.getElementById("Show" + oper + "Div");
  obj2 = document.getElementById("Hide" + oper + "Div");
  if (value) {
    obj1.style.display = "none";
    obj2.style.display = "";
  } else {
    obj1.style.display = "";
    obj2.style.display = "none";
  }
}
</script>
<div id="ShowExtraDiv">
<a onclick="setDivVisibility('Extra', true)">[<s:_>More info</s:_>]</a>
</div>
<div style="display: none;" id="HideExtraDiv">
<a onclick="setDivVisibility('Extra', false)">[<s:_>Hide extended info</s:_>]</a>

<br/>

<div class="table-scroll" style="margin-top: 7px;">
<table class="table">
<tr>
<th>Full time</th>
<th>Duration from start</th>
<% if (!info.lang_id) { %>
<th><s:_>Content type</s:_></th>
<% } %>
<% #if CONF_HAS_LIBUUID - 0 != 0 %>
    <th>UUID</th>
<% #endif %>
<th style="width: 10em;"><s:_>Imported?</s:_></th>
<th><s:_>Hidden?</s:_></th>
<th><s:_>Saved?</s:_></th>
<th><s:_>Read-only?</s:_></th>
<th><s:_>Locale ID</s:_></th>
<%  if (global->score_system != SCORE_ACM) { %>
<th><s:_>Score adjustment</s:_></th>
<%  } %>
<th><s:_>Size</s:_></th>
<th><s:_>Hash value</s:_></th>
<th><s:_>Pages printed</s:_>:</th>
</tr>
<tr>
<td><s:v value="info.time" />:<s:v value="info.nsec" /></td>
<td><s:v type="duration" value="run_time - start_time, info.nsec" /></td>
<% if (!info.lang_id) { %>
<td><s:v type="mime_type" value="info.mime_type" /></td>
<% } %>
<% #if CONF_HAS_LIBUUID - 0 != 0 %>
    <td><s:v type="uuid" value="info.run_uuid" /></td>
<% #endif %>
<td><s:vb value="info.is_imported" /></td>
<td><s:vb value="info.is_hidden" /></td>
<td><s:vb value="info.is_saved" /></td>
<td><s:vb value="info.is_readonly" /></td>
<td><s:v value="info.locale_id" /></td>
<%  if (global->score_system != SCORE_ACM) { %>
<td><s:v value="info.score_adj" /></td>
<%  } %>
<% snprintf(filtbuf1, sizeof(filtbuf1), "size == size(%d)", run_id); %>
<td><s:a url="FilteredMainUrl"><s:v value="info.size" /></s:a></td>
<% snprintf(filtbuf1, sizeof(filtbuf1), "hash == hash(%d)", run_id); %>
<td><s:a url="FilteredMainUrl"><s:v type="sha1" value="info.h.sha1" /></s:a></td>
<td><s:v value="(int) info.pages" /></td>
</tr>

</table>
</div>
</div>

 <div id="brief-actions">
<s:url name="DownloadRunUrl" ac="download-run">
    <s:param name="run_id" value="run_id" />
</s:url>
<s:url name="ResubmitUrl" ac="priv-submit-page">
    <s:param name="problem" value="info.prob_id" />
    <s:param name="lang_id" value="info.lang_id" />
</s:url>
<p style="display: inline-block;"><s:a url="ResubmitUrl">Resubmit</s:a>&nbsp;&nbsp;<s:a url="DownloadRunUrl"><s:_>Download run</s:_></s:a></p>

<% if (phr->role == USER_ROLE_ADMIN && opcaps_check(phr->caps, OPCAP_EDIT_RUN) >= 0 && info.is_readonly <= 0) { %>
<s:form>
<s:hidden name="run_id" checkExpr=">=0" />
<p><s:submit ac="clear-run" /></p>
</s:form>
<% } %>

<% if (opcaps_check(phr->caps, OPCAP_PRINT_RUN) >= 0) { %>
<s:form>
<s:hidden name="run_id" checkExpr=">=0" />
<p><s:submit ac="print-run" /></p>
</s:form>
<% } %>

<%
  if (run_id > 0) {
    run_id2 = run_find(cs->runlog_state, run_id - 1, 0, info.user_id,
                       info.prob_id, info.lang_id, NULL, NULL);
  }
%>

<s:form>
<s:hidden name="run_id" checkExpr=">=0" />
<p><s:_>Compare this run with run</s:_>: <s:textfield name="run_id2" checkExpr=">= 0" size="10" /> <s:submit ac="compare-runs" /></p>
</s:form>

<s:form>
<s:hidden name="run_id" checkExpr=">=0" />
<p><s:_>Charset</s:_>: <% charset_html_select(out_f, "run_charset", run_charset); %> <s:submit ac="view-source" /></p>
</s:form>

<% if (global->enable_report_upload) { %>
<s:form enctype="multipart/form-data">
<s:hidden name="run_id" checkExpr=">=0" />
<p><s:_>Upload judging protocol</s:_>: <input type="file" name="file" /><%
    if (global->team_enable_rep_view) {
%> <s:checkbox name="judge_report" checkedExpr="1" /><s:_>Judge's report</s:_><%
%> <s:checkbox name="user_report" checkedExpr="1" /><s:_>User's report</s:_><%
} %><s:submit ac="upload-report" />
</s:form>
<% } %>

</div>
</div>
<hr />

<div id="prog">
<%  if (prob && prob->type > 0 && info.mime_type > 0) {
    if(info.mime_type >= MIME_TYPE_IMAGE_FIRST
       && info.mime_type <= MIME_TYPE_IMAGE_LAST) {
%>
<s:url name="PrivDownloadRunUrl" ac="download-run">
    <s:param name="run_id" value="run_id" />
    <s:param name="no_disp" value="1" />
</s:url>
<p><s:img url="PrivDownloadRunUrl" label="Submit image" /></p>
<%    } else { %>
<p><s:_>The submission is binary and thus is not shown.</s:_></p>
<%    }
  } else if (lang && lang->binary) {
%><p><s:_>The submission is binary and thus is not shown.</s:_></p>
<%  } else if (!info.is_imported) {
    if (src_flags < 0 || generic_read_file(&src_text, 0, &src_len, src_flags, 0, src_path, "") < 0) {
%>
<big><font color="red"><s:_>Cannot read source text!</s:_></font></big>
<%    } else {
      if (run_charset && (charset_id = charset_get_id(run_charset)) > 0) {
        unsigned char *newsrc = charset_decode_to_heap(charset_id, src_text);
        xfree(src_text);
        src_text = newsrc;
        src_len = strlen(src_text);
      }
%>
<table class="b0"><% text_table_number_lines(out_f, src_text, src_len, 0, " class=\"b0\""); %></table></div>
<%
      xfree(src_text); src_text = 0;
    }
  }
%>

<%
  if (prob && prob->variant_num > 0 && variant > 0 && prob->xml.a && prob->xml.a[variant - 1]) {
    px = prob->xml.a[variant - 1];
  } else if (prob && prob->variant_num <= 0 && prob->xml.p) {
    px = prob->xml.p;
  }

  if (px && px->review_comments) {
%><h2><s:_>Review comments</s:_></h2>
<script>
function addReviewMsg(serial)
{
    var v = document.getElementById("ReviewMsg" + serial).textContent;
    var o = document.getElementById("msg_text");
    o.value = o.value + v + "\n";
}
</script>
<%
    int rc_serial = 0;
    for (struct xml_tree *rcp = px->review_comments->first_down; rcp; rcp = rcp->right) {
      if (rcp->tag == PROB_T_COMMENT) {
%><p><input type="button" value="(+)" onclick="addReviewMsg(<s:v value="rc_serial" />)" /><span id="ReviewMsg<s:v value="rc_serial" />"><%
        problem_xml_unparse_node(out_f, rcp, NULL, NULL, NULL);
        ++rc_serial;
%></span></p>
<%
      }
    }
  }

  if (px && px->review_notes) {
%>
<h2><s:_>Review notes</s:_></h2>
<% problem_xml_unparse_node(out_f, px->review_notes, NULL, NULL, NULL); %>
<%
  }
%>


<%
  if (compiler_output && *compiler_output) {
%>

<div id="output">
<h2><s:_>Compiler/style checker output</s:_></h2>
<pre><s:v value="compiler_output" /></pre></div>
<%
  }
%>

<hr style="clear: both;" />

<div class="h2-long" style="margin-top: 13px; margin-bottom: 5px;">
<h2>Change status</h2>
</div>

<div class="buttons">
<s:form id="just_change">
<s:hidden name="run_id" checkExpr=">=0" />
<s:submit ac="priv-submit-run-just-ignore" />
<s:submit ac="priv-submit-run-just-ok" />
<br/>
<s:submit ac="priv-submit-run-just-summon" />
</s:form>
</div>

<%
  if (fcev.u > 0) {
%>
<div class="h2-long" style="margin-top: 13px; margin-bottom: 10px;">
<h2><s:_>Run comments</s:_></h2>
</div>

<div class="width-100">
<table class="message-table">
    <tr class="mes-top">
        <td>Author</td>
        <td>Run comment</td>
    </tr>
<%
    for (i = 0; i < fcev.u; ++i) {
%>
   <tr>
       <td class="profile">
<%
      if (!fcev.v[i].e.from) {
        if (!fcev.v[i].e.j_from) {
%><b>Judge</b><%
        } else {
%><b><s:v value="teamdb_get_name_2(cs->teamdb_state, fcev.v[i].e.j_from)" /></b><%
        }
      } else {
%><s:v value="teamdb_get_name_2(cs->teamdb_state, fcev.v[i].e.from)" /><%
      }
%>
<br/>
<s:v value="fcev.v[i].e.time" />
<%    if (fcev.v[i].e.old_run_status > 0) { %>
<br/>
Old status: <s:v value="run_status_short_str(fcev.v[i].e.old_run_status - 1)" escape="false" />
<%    } %>
<%    if (fcev.v[i].e.new_run_status > 0) { %>
<br/>
New status: <s:v value="run_status_short_str(fcev.v[i].e.new_run_status - 1)" escape="false" />
<%    } %>
<%
      if (phr->role == USER_ROLE_ADMIN) {
%>
<br/>
<s:v value="fcev.v[i].e.a.ip" />
<%
      }
%>
       </td>
       <td>
<pre><s:v value="skip_message_headers(fcev.v[i].text)" /></pre>
       </td>
   </tr>
<%
    }
%>
</table>
</div>
<%
  }
%>

<%
  if (fcev2.u > 0) {
%>
<div class="h2-long" style="margin-top: 13px; margin-bottom: 5px;">
    <h2><s:_>Run comments for previous runs</s:_></h2>
</div>

<div class="width-100">
<table class="message-table">
    <tr class="mes-top">
        <td>Author</td>
        <td>Run comment</td>
    </tr>
<%
    for (i = 0; i < fcev2.u; ++i) {
%>
   <tr>
       <td class="profile">
<%
      if (!fcev2.v[i].e.from) {
        if (!fcev2.v[i].e.j_from) {
%><b>Judge</b><%
        } else {
%><b><s:v value="teamdb_get_name_2(cs->teamdb_state, fcev2.v[i].e.j_from)" /></b><%
        }
      } else {
%><s:v value="teamdb_get_name_2(cs->teamdb_state, fcev2.v[i].e.from)" /><%
      }
%>
<br/>
<s:v value="fcev2.v[i].e.time" />
<%    if (fcev2.v[i].e.old_run_status > 0) { %>
<br/>
Old status: <s:v value="run_status_short_str(fcev2.v[i].e.old_run_status - 1)" escape="false" />
<%    } %>
<%    if (fcev2.v[i].e.new_run_status > 0) { %>
<br/>
New status: <s:v value="run_status_short_str(fcev2.v[i].e.new_run_status - 1)" escape="false" />
<%    } %>
<%
      if (phr->role == USER_ROLE_ADMIN) {
%>
<br/>
<s:v value="fcev2.v[i].e.a.ip" />
<%
      }
%>
<%
  if (fcev2.v[i].e.run_id > 0) {
%>
<s:url name="ViewOtherSourceUrl" ac="view-source">
    <s:param name="run_id" value="fcev2.v[i].e.run_id" />
</s:url>
<br/>
Run Id: <s:a url="ViewOtherSourceUrl"><s:v value="fcev2.v[i].e.run_id" /></s:a>
<%
  }
%>
       </td>
       <td>
<pre><s:v value="skip_message_headers(fcev2.v[i].text)" /></pre>
       </td>
   </tr>
<%
    }
%>
</table>
</div>
<%
  }
%>

<div class="h2-long" style="margin-top: 13px; margin-bottom: 5px;">
<h2><s:_>Add a new run comment</s:_></h2></div>

<s:form id="run_comment">

<p><textarea id="msg_text" name="msg_text" rows="20" cols="60"></textarea></p>

<div class="buttons" style="margin-top: -13px;">
<s:hidden name="run_id" checkExpr=">=0" />
<s:button onclick="formatViolation()" label="Formatting rules violation" /></br/>
<s:submit ac="priv-submit-run-comment" />
<s:submit ac="priv-submit-run-comment-and-ignore" />
<s:submit ac="priv-submit-run-comment-and-ok" />
<s:submit ac="priv-submit-run-comment-and-reject" />
<br/>
<s:submit ac="priv-submit-run-comment-and-summon" />
</div></s:form>

<%
  if (phr->role == USER_ROLE_ADMIN) {
%>

<div class="h2-long" style="margin-top: 13px; margin-bottom: 5px;">
  <h2><s:_>Add a permanent problem review comment</s:_></h2>
</div>

<s:form id="review_comment">
<s:hidden name="run_id" checkExpr=">=0" />
<s:textfield name="review_comment" size="80" value="" /><br/>
<s:submit ac="add-review-comment" />
</s:form>

<br />

<%
  }
%>

<%@include "priv_footer.csp"
%><%
cleanup:
  clar_free_fcev(&fcev);
  clar_free_fcev(&fcev2);
  l10n_resetlocale();
  html_armor_free(&ab);
  xfree(rep_text);
  testing_report_free(tr);
  xfree(compiler_output);
  xfree(txt_text);
  xfree(other_runs);
  xfree(other_uuids);
%>
